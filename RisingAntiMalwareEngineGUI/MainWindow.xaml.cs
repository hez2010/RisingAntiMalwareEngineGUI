using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Animation;

namespace RisingAntiMalwareEngineGUI
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow
    {
        public MainWindow()
        {
            InitializeComponent();
            InitTask();
        }

        private void LabelShow()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
               {
                   DoubleAnimation daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                   InitLabel.BeginAnimation(OpacityProperty, daV);
               }));
            });
        }
        private void LabelGo()
        {
            Task.Run(() =>
            {
                Thread.Sleep(500);
                LabelShow();
                for (int i = 0; i <= 606; i += 4)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {

                       InitLabel.Width = i;

                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    InitLabel.Width = 606;
                }));
                WindowShow();
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }

        private void WindowShow()
        {
            Task.Run(() =>
            {
                for (int i = 150; i <= 490; i += 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        form.Height = i;
                    }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    form.Height = 500;
                }));
            });
        }
        private void InitTask()
        {
            if (!System.IO.File.Exists("ramecl.exe"))
            {
                MessageBox.Show("未找到扫描引擎! 程序初始化失败", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                Environment.Exit(0);
            }
            LabelGo();
        }

        private bool _flag;
        private void WindowClosing()
        {
            Task.Run(() =>
            {
                for (int i = 500; i >= 10; i -= 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {
                       form.Height = i;
                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(Close));
            });
        }
        private void WindowHiding()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    form.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }
        private void MainWindow_OnClosing(object sender, CancelEventArgs e)
        {
            WindowClosing();
            WindowHiding();
            if (!_flag)
            {
                e.Cancel = true;
            }
            _flag = true;
        }
    }
}
