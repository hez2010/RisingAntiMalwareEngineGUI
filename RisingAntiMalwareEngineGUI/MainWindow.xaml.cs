using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Management;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using ICSharpCode.SharpZipLib.Zip;
using Microsoft.Research.DynamicDataDisplay;
using Microsoft.Research.DynamicDataDisplay.DataSources;

namespace RisingAntiMalwareEngineGUI
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow
    {
        private ObservableCollection<VirInfo> VirInfoList { get; set; } = new ObservableCollection<VirInfo>();
        private ObservableCollection<Folder> FolderList { get; set; } = new ObservableCollection<Folder>();

        private string StrProgramVer { get; set; }

        private void EnableAllFuncBtn()
        {
            DeleteItems.IsEnabled = true;
            PackItems.IsEnabled = true;
        }

        private void DisableAllFuncBtn()
        {
            DeleteItems.IsEnabled = false;
            PackItems.IsEnabled = false;
        }

        public MainWindow()
        {
            InitializeComponent();
            ProcessMetro.Visibility = Visibility.Hidden;
            StrProgramVer = Assembly.GetExecutingAssembly().GetName().Version.ToString();
            Form.Height = 150;
            VersionLabel.Content = "RAMECL GUI Version: " + StrProgramVer;
            LbProgramVer.Content = StrProgramVer;
            InitTask();

            CpuPlotter.AddLineGraph(_dataSourceCpu, Colors.Green, 2);
            CpuPlotter.LegendVisible = false;
            MemPlotter.AddLineGraph(_dataSourceMem, Colors.Green, 2);
            MemPlotter.LegendVisible = false;
            CpuPlotter.Viewport.FitToView();
            MemPlotter.Viewport.FitToView();
        }

        private long _folderTreeCount;

        private void InitFolderTree()
        {
            FolderList.Clear();
            foreach (var i in GetDeviceId())
            {
                FolderList.Add(new Folder { Name = i, Count = ++_folderTreeCount });
            }
            foreach (var i in FolderList)
            {
                try
                {
                    foreach (var j in Directory.GetDirectories(i.Name + "\\"))
                    {
                        i.Children.Add(new Folder { Name = Path.GetFileName(j), Count = ++_folderTreeCount });
                    }
                }
                catch
                {
                    // ignored
                }
            }
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            ListViewVirInfo.ItemsSource = VirInfoList;
            FolderTree.ItemsSource = FolderList;
            ScanProcessBar.Visibility = Visibility.Hidden;
            FolderLoading.Visibility = Visibility.Hidden;
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Hidden;
        }
        private void LabelGo()
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
                var daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                InitLabel.BeginAnimation(OpacityProperty, daV);
            }));
            Dispatcher.BeginInvoke(new Action(() =>
            {
                var daV = new DoubleAnimation(0, 606, new Duration(TimeSpan.FromSeconds(1)));
                daV.Completed += (sender, args) => WindowShow();
                InitLabel.BeginAnimation(WidthProperty, daV);
            }));

            Dispatcher.BeginInvoke(new Action(() =>
            {
                var daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                daV.Completed += (sender, args) =>
                {
                    InitLabel.Margin = new Thickness(0, 90, 0, 0);
                    InitLabel.Background = Brushes.Black;
                    var daV1 = new DoubleAnimation(InitLabel.Width, Form.Width, new Duration(TimeSpan.FromMilliseconds(1)));
                    InitLabel.BeginAnimation(WidthProperty, daV1);
                    var daV2 = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV2);
                };
                InitLabel.BeginAnimation(OpacityProperty, daV);
            }));
        }

        private void WindowShow()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    var daV = new DoubleAnimation(150, 500, new Duration(TimeSpan.FromSeconds(1)));
                    Form.BeginAnimation(HeightProperty, daV);
                }));
            });
        }

        private void InitTask()
        {
            LabelGo();
            InitFolderTree();
        }

        private static IEnumerable<string> GetDeviceId()
        {
            var deviceIDs = new List<string>();
            var query = new ManagementObjectSearcher("SELECT  *  From  Win32_LogicalDisk ");
            var queryCollection = query.Get();
            foreach (var o in queryCollection)
            {
                var mo = (ManagementObject)o;

                switch (int.Parse(mo["DriveType"].ToString()))
                {
                    case (int)DriveType.Removable: //可以移动磁盘     
                        {
                            //MessageBox.Show("可以移动磁盘");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.Fixed: //本地磁盘     
                        {
                            //MessageBox.Show("本地磁盘");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.CDRom: //CD   rom   drives     
                        {
                            //MessageBox.Show("CD   rom   drives ");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.Network: //网络驱动   
                        {
                            //MessageBox.Show("网络驱动器 ");
                            break;
                        }
                    case (int)DriveType.Ram:
                        {
                            //MessageBox.Show("驱动器是一个 RAM 磁盘 ");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.NoRootDirectory:
                        {
                            //MessageBox.Show("驱动器没有根目录 ");
                            break;
                        }
                }
            }
            return deviceIDs;
        }

        private bool _flag;

        private static void UnZip(string zipFilePath, string unZipDir)
        {
            if (unZipDir == string.Empty)
            {
                unZipDir = zipFilePath.Replace(Path.GetFileName(zipFilePath),
                    Path.GetFileNameWithoutExtension(zipFilePath));
            }

            if (!unZipDir.EndsWith("/"))
            {
                unZipDir += "/";
            }
            if (!Directory.Exists(unZipDir))
                Directory.CreateDirectory(unZipDir);

            using (var s = new ZipInputStream(File.OpenRead(zipFilePath)))
            {

                ZipEntry theEntry;
                while ((theEntry = s.GetNextEntry()) != null)
                {
                    var directoryName = Path.GetDirectoryName(theEntry.Name);
                    var fileName = Path.GetFileName(theEntry.Name);
                    if (!string.IsNullOrEmpty(directoryName))
                    {
                        if (!directoryName.EndsWith("/"))
                        {
                            directoryName += "/";
                        }
                        Directory.CreateDirectory(unZipDir + directoryName);
                    }
                    if (fileName != string.Empty)
                    {
                        if (File.Exists(unZipDir + theEntry.Name))
                        {
                            using (var streamWriter = File.Create(unZipDir + theEntry.Name + ".toReplace"))
                            {
                                var data = new byte[2048];
                                while (true)
                                {
                                    var size = s.Read(data, 0, data.Length);
                                    if (size > 0)
                                    {
                                        streamWriter.Write(data, 0, size);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            using (var streamWriter = File.Create(unZipDir + theEntry.Name))
                            {
                                var data = new byte[2048];
                                while (true)
                                {
                                    var size = s.Read(data, 0, data.Length);
                                    if (size > 0)
                                    {
                                        streamWriter.Write(data, 0, size);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        private void WindowClosing()
        {
            Task.Run(() =>
            {
                Dispatcher.Invoke(() =>
                {
                    var daV = new DoubleAnimation(500, 10, new Duration(TimeSpan.FromSeconds(1)));
                    daV.Completed += (sender, args) => Close();
                    Form.BeginAnimation(HeightProperty, daV);
                });
            });
        }
        private void WindowHiding()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    var daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    Form.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }
        private void MainWindow_OnClosing(object sender, CancelEventArgs e)
        {
            WindowClosing();
            WindowHiding();
            if (!_flag)
            {
                e.Cancel = true;
            }
            _flag = true;
        }

        private void ScanRunning()
        {
            Task.Run(() =>
            {
                long count = 0;
                while (!_isfinished)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        SpeedLabel.Content = (_lastcount - count == 0 ? (long)(_lastcount / (Math.Abs((DateTime.Now - _startDateTime).TotalSeconds) < 0.01 ? 1 : (DateTime.Now - _startDateTime).TotalSeconds)) : _lastcount - count) + " 个/s";
                        count = _lastcount;
                        TimeLabel.Content = (DateTime.Now - _startDateTime).ToString(@"hh\:mm\:ss");
                    }));
                    Thread.Sleep(1000);
                }

            });
        }
        private int _fileCountTot;

        private void GetFileFigures(string path)
        {
            try
            {
                _fileCountTot += Directory.GetFiles(path).Length;
            }
            catch
            {
                // ignored
            }
            try
            {
                foreach (var i in Directory.GetDirectories(path))
                {
                    GetFileFigures(i);
                }
            }
            catch
            {
                // ignored
            }
        }
        private void FileProcessUpdate(string path)
        {
            Task.Run(() =>
            {
                GetFileFigures(path);
            });
            Task.Run(() =>
            {
                double lastCount = 0;
                Thread.Sleep(2000);
                while (!_isfinished)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        double temp;
                        if ((temp = _fileCountTot == 0 ? 0 : _lastcount * 100 / _fileCountTot) >= lastCount)
                        {
                            ScanProcessBar.Value = temp;
                        }
                        lastCount = ScanProcessBar.Value;
                    }));
                    Thread.Sleep(1000);
                }
            });
        }
        private long _lastcount;
        private bool _isfinished;
        private long _threat;
        private DateTime _startDateTime;
        private void UpdateVirInfoListView(VirInfo content)
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
                if (content.FinishFlag)
                {
                    ButtonStart.Content = "开始";
                    TbCurrentTarget.Text = "扫描完毕";
                    try
                    {
                        _watcher.EnableRaisingEvents = false;
                        _watcher.Dispose();
                    }
                    catch
                    {
                        //ignored
                    }
                    ProcessMetro.Visibility = Visibility.Hidden;
                    MetroProcessbar.Stop();
                    ScanProcessBar.Visibility = Visibility.Hidden;
                    FileNameTextBox.Visibility = Visibility.Visible;
                    SpeedLabel.Content = (long)(_lastcount / (Math.Abs((DateTime.Now - _startDateTime).TotalSeconds) < 0.5 ? 1 : (DateTime.Now - _startDateTime).TotalSeconds)) + " 个/s";
                    EnableAllFuncBtn();
                    _isfinished = true;
                }
                else
                {
                    if (_lastcount++ == 0)
                    {
                        _watcher.EnableRaisingEvents = false;
                        _watcher.Dispose();
                        _startDateTime = DateTime.Now;
                        ProcessMetro.Visibility = Visibility.Hidden;
                        MetroProcessbar.Stop();
                        ScanProcessBar.Visibility = Visibility.Visible;
                        ScanRunning();
                    }
                    FileCountLabel.Content = _lastcount.ToString();
                    if (string.IsNullOrEmpty(content.VirName) || string.IsNullOrEmpty(content.DetectEngine))
                    {
                        TbCurrentTarget.Text = content.FileName;
                    }
                    else
                    {
                        VirInfoList.Add(new VirInfo(content.FileName, content.VirName, content.DetectEngine, content.FinishFlag, content.IsSelected, "尚未处理"));
                        ThreatLabel.Content = ++_threat;
                        TbCurrentTarget.Text = content.FileName;

                    }
                }
            }));
        }
        private readonly ObservableDataSource<Point> _dataSourceCpu = new ObservableDataSource<Point>();
        private readonly ObservableDataSource<Point> _dataSourceMem = new ObservableDataSource<Point>();
        private int _currentSecond;
        private void OnProcess(object source, FileSystemEventArgs e)
        {
            var fileName = Path.GetFileName(e.FullPath) ?? "";
            if (e.ChangeType == WatcherChangeTypes.Created)
            {
                if (fileName.IndexOf(".rp", StringComparison.Ordinal) >= 0)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        TbCurrentTarget.Text = $@"正在初始化引擎并更新病毒库, 可能需要较长时间...
-->下载病毒库增量文件: {fileName}";
                    }));
                }
            }
            else if (e.ChangeType == WatcherChangeTypes.Changed)
            {
                if (fileName.IndexOf(".rmd", StringComparison.Ordinal) >= 0)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        TbCurrentTarget.Text = @"正在初始化引擎并更新病毒库, 可能需要较长时间...
-->初始化引擎";
                    }));
                }
                else if (fileName.IndexOf(".tmp", StringComparison.Ordinal) >= 0)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        TbCurrentTarget.Text = @"正在初始化引擎并更新病毒库, 可能需要较长时间...
-->合并病毒库";
                    }));
                }
            }
        }

        private FileSystemWatcher _watcher;
        private void EngineUpdateWatcher()
        {
            _watcher = new FileSystemWatcher
            {
                Path = Environment.CurrentDirectory
            };
            _watcher.Changed += OnProcess;
            _watcher.Created += OnProcess;
            _watcher.Deleted += OnProcess;
            _watcher.EnableRaisingEvents = true;
            _watcher.NotifyFilter = NotifyFilters.Attributes | NotifyFilters.CreationTime |
                                   NotifyFilters.DirectoryName | NotifyFilters.FileName | NotifyFilters.LastAccess
                                   | NotifyFilters.LastWrite | NotifyFilters.Security | NotifyFilters.Size;
            _watcher.IncludeSubdirectories = true;
        }
        private void UpdateResUsageInfoView(ResUsageInfo content)
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
                if (content.CpuUsagePercent < -8)
                {
                    _currentSecond = 0;
                    _dataSourceCpu.Collection.Clear();
                    _dataSourceMem.Collection.Clear();
                    CpuPlotter.Viewport.FitToView();
                    MemPlotter.Viewport.FitToView();
                }
                else
                {
                    _currentSecond++;
                    double x = _currentSecond, y1 = content.CpuUsagePercent, y2 = content.RamUsage;
                    _dataSourceCpu.AppendAsync(Dispatcher, new Point(x, y1));
                    _dataSourceMem.AppendAsync(Dispatcher, new Point(x, y2));
                }
            }));
        }

        private Scan _scanInstance;
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if ((string)ButtonStart.Content == "开始")
            {
                if (!File.Exists("conscan.exe"))
                {
                    MessageBox.Show("未找到扫描引擎! 请将引擎安装至当前目录", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                _lastcount = 0;
                _threat = 0;
                _isfinished = false;
                _scanInstance = new Scan();
                _fileCountTot = 0;
                string paras = null;
                VirInfoList.Clear();
                DisableAllFuncBtn();
                TbCurrentTarget.Text = TbCurrentTarget.Text = @"正在初始化引擎并更新病毒库, 可能需要较长时间...
-->检查病毒库更新";
                ProcessMetro.Visibility = Visibility.Visible;
                MetroProcessbar.Start();
                FileNameTextBox.Visibility = Visibility.Hidden;
                FileCountLabel.Content = "0";
                TimeLabel.Content = "00:00:00";
                ThreatLabel.Content = "0";
                SpeedLabel.Content = "0 个/s";
                if (!(EngineCloud.IsChecked ?? false)) paras += " -cloud=0"; else paras += " -cloud=1";
                if (!(EngineAsg.IsChecked ?? false)) paras += " -enable-asg=0"; else paras += " -enable-asg=1";
                if (!(EngineTfe.IsChecked ?? false)) paras += " -enable-tfe=0"; else paras += " -enable-tfe=1";
                if (Treat.IsChecked ?? false) paras += " -kill";
                if (NonCompound.IsChecked ?? false) paras += " -!scan-compound";
                if (Thershold.IsChecked ?? false) paras += $" -rdm.thershold={(int)(ThersholdValue.Value / 10)}";
                if (!(CloudCheck.IsChecked ?? false)) paras += " -cav.md5=0 -cav.sha1=0";
                if (Filter.IsChecked ?? false) paras += " \"-regex=#" + FilterValue.Text + "\"";
                if (EngineWorkers.IsChecked ?? false) paras += $" -workers={(int)SliderWorkers.Value}";
                if (LogOutput.IsChecked ?? false) paras += $" \"-log={Environment.CurrentDirectory}\\ScanLog_{DateTime.Now:yyMMddHHmmss}.log\"";
                if (_scanInstance.Start(FileNameTextBox.Text, paras, UpdateVirInfoListView, UpdateResUsageInfoView))
                {
                    ButtonStart.Content = "停止";
                    EngineUpdateWatcher();
                    FileProcessUpdate(FileNameTextBox.Text);
                }
                else
                {
                    MessageBox.Show("指定扫描对象不存在", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                    TbCurrentTarget.Text = "";
                    ProcessMetro.Visibility = Visibility.Hidden;
                    MetroProcessbar.Stop();
                    FileNameTextBox.Visibility = Visibility.Visible;
                }
            }
            else
            {
                _scanInstance.StopScan();
                ButtonStart.Content = "开始";
            }
        }

        private void Scan_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ScanGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Visible;
        }

        private void Result_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ResultGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Visible;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void Config_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ConfigGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Visible;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void CheckBox_Click_All(object sender, RoutedEventArgs e)
        {
            foreach (var i in VirInfoList)
            {
                if (CheckBoxSelectAll.IsChecked ?? false)
                {
                    i.IsSelected = true;
                }
                else
                {
                    i.IsSelected = false;
                }
            }
            ListViewVirInfo.Items.Refresh();
        }
        private void PackItems_OnClick(object sender, RoutedEventArgs routedEventArgs)
        {
            var fileList = (from i in VirInfoList where i.IsSelected && i.DealState.IndexOf("删除成功", StringComparison.Ordinal) < 0 select i.FileName).ToList();
            if (fileList.Count == 0)
            {
                MessageBox.Show("没有勾选任何文件", "提示", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            var strZipFilePath =
                $"{Environment.CurrentDirectory}\\PackedFiles_{DateTime.Now:yyMMddHHmmss}.zip";
            var failToPack = "";
            using (var zip = ZipFile.Create(strZipFilePath))
            {
                zip.BeginUpdate();
                long k = 0;
                foreach (var i in fileList)
                {
                    try
                    {
                        zip.Add(i);
                    }
                    catch
                    {
                        failToPack += i + "\r\n";
                    }
                    DealProcessBar.Value = ++k * 100 / fileList.Count;
                }
                try
                {
                    zip.CommitUpdate();
                }
                catch
                {
                    try
                    {
                        File.Delete(strZipFilePath);
                    }
                    catch
                    {
                        // ignored
                    }
                    MessageBox.Show("文件打包失败, 可能是因为权限不足", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
            }
            if (!string.IsNullOrEmpty(failToPack))
            {
                MessageBox.Show($"部分文件已成功打包至 {strZipFilePath}\r\n以下文件无法打包, 可能是因为权限不足: \r\n{failToPack}", "提示",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            else
            {
                MessageBox.Show("文件已成功打包至 " + strZipFilePath, "提示", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void DeleteItems_OnClick(object sender, RoutedEventArgs routedEventArgs)
        {
            long k = 0, tot = 0;
            tot += VirInfoList.LongCount(i => i.IsSelected && i.DealState.IndexOf("成功", StringComparison.Ordinal) < 0);
            if (tot == 0)
            {
                return;
            }
            foreach (var i in VirInfoList)
            {
                if (i.IsSelected && i.DealState.IndexOf("成功", StringComparison.Ordinal) < 0)
                {
                    try
                    {
                        File.Delete(i.FileName);
                        i.IsSelected = false;
                        if (CheckBoxSelectAll.IsChecked ?? false)
                        {
                            CheckBoxSelectAll.IsChecked = false;
                        }
                        i.DealState = "删除成功";
                    }
                    catch
                    {
                        i.DealState = "删除失败";
                    }
                }
                DealProcessBar.Value = ++k * 100 / tot;
            }
            ListViewVirInfo.Items.Refresh();
        }

        private void FolderTree_OnSelected(object sender, RoutedEventArgs e)
        {
            var fileName = "";
            var a = e.OriginalSource as TreeViewItem;
            do
            {
                if (a != null)
                {
                    var folder = a.Header as Folder;
                    if (folder != null)
                    {
                        fileName = folder.Name + "\\" + fileName;
                    }
                    var parent = GetSelectedTreeViewItemParent(a);
                    a = parent as TreeViewItem;
                }
            } while (a != null);
            FileNameTextBox.Text = fileName.Remove(fileName.Length - 1);
        }

        private void DoGetNextFolder(string path, long count, ObservableCollection<Folder> root)
        {
            if (root != null)
            {
                foreach (var i in root)
                {
                    if (i.Count == count)
                    {
                        if (i.isExpanded == false)
                        {
                            i.isExpanded = true;
                            var j = i.Children;
                            foreach (var k in j)
                            {
                                try
                                {
                                    foreach (var l in Directory.GetDirectories(path + "\\" + k.Name))
                                    {
                                        Dispatcher.BeginInvoke(new Action(() =>
                                        {
                                            k.Children.Add(new Folder { Name = Path.GetFileName(l), Count = ++_fileCountTot });
                                        }));
                                    }
                                }
                                catch
                                {
                                    //ignored
                                }
                            }
                        }
                    }
                    else
                    {
                        DoGetNextFolder(path, count, i.Children);
                    }
                }
            }
        }
        private void GetNextFolder(string path, long count, ObservableCollection<Folder> root)
        {
            Task.Run(() =>
            {
                DoGetNextFolder(path, count, root);
                _expanding--;
                if (_expanding == 0)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        FolderLoading.Visibility = Visibility.Hidden;
                        FolderRefresh.IsEnabled = true;
                    }));
                }
            });
        }

        private int _expanding;
        private void FolderTree_OnExpanded(object sender, RoutedEventArgs e)
        {
            var fileName = "";
            var a = e.OriginalSource as TreeViewItem;
            long curCount;
            if (a != null)
            {
                if (a.Header is Folder folder) curCount = folder.Count;
                else return;
            }
            else
            {
                return;
            }
            do
            {
                var folder = a.Header as Folder;
                if (folder != null)
                {
                    fileName = folder.Name + "\\" + fileName;
                }
                var parent = GetSelectedTreeViewItemParent(a);
                a = parent as TreeViewItem;
            } while (a != null);
            fileName = fileName.Remove(fileName.Length - 1);
            FolderRefresh.IsEnabled = false;
            FolderLoading.Visibility = Visibility.Visible;
            _expanding++;
            GetNextFolder(fileName, curCount, FolderList);
        }
        private static ItemsControl GetSelectedTreeViewItemParent(DependencyObject item)
        {
            var parent = VisualTreeHelper.GetParent(item);
            while (!(parent is TreeViewItem || parent is TreeView))
            {
                parent = VisualTreeHelper.GetParent(parent);
            }

            return parent as ItemsControl;
        }

        private void FolderRefresh_OnClick(object sender, RoutedEventArgs e)
        {
            InitFolderTree();
        }

        private void Form_DragEnter(object sender, DragEventArgs e)
        {
            e.Effects = e.Data.GetDataPresent(DataFormats.FileDrop) ? DragDropEffects.All : DragDropEffects.None;
        }

        private void Form_Drop(object sender, DragEventArgs e)
        {
            var s = (string[])e.Data.GetData(DataFormats.FileDrop, false);
            if (s == null) return;
            FileNameTextBox.Text = s[0];
        }
    }
}
