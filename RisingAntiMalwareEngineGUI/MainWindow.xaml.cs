using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using Microsoft.Research.DynamicDataDisplay.DataSources;
using Microsoft.Research.DynamicDataDisplay;
using System.Collections.Generic;
using System.Management;
using System.Windows.Controls;

namespace RisingAntiMalwareEngineGUI
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow
    {
        private ObservableCollection<VirInfo> VirInfoList { get; set; } = new ObservableCollection<VirInfo>();
        private ObservableCollection<Folder> FolderList { get; set; } = new ObservableCollection<Folder>();
        public MainWindow()
        {
            InitializeComponent();
            Dispatcher.BeginInvoke((Action)(() =>
            {
                Form.Height = 150;
                ResultGrid.Visibility = Visibility.Hidden;
                ConfigGrid.Visibility = Visibility.Hidden;
            }));
            InitTask();
            CpuPlotter.AddLineGraph(_dataSourceCpu, Colors.Green, 2);
            CpuPlotter.LegendVisible = false;
            MemPlotter.AddLineGraph(_dataSourceMem, Colors.Green, 2);
            MemPlotter.LegendVisible = false;
            CpuPlotter.Viewport.FitToView();
            MemPlotter.Viewport.FitToView();
        }

        private void InitFolderTree()
        {
            Folder root = new Folder() { Name = "此电脑" };
            foreach (var i in GetDeviceId())
            {
                root.Children.Add(new Folder { Name = i });
            }
            FolderList.Add(root);
            foreach (var i in root.Children)
            {
                try
                {
                    foreach (var j in Directory.GetDirectories(i.Name + "\\"))
                    {
                        i.Children.Add(new Folder { Name = Path.GetFileName(j) });
                    }
                }
                catch
                {
                    // ignored
                }
            }
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            ListViewVirInfo.ItemsSource = VirInfoList;
            FolderTree.ItemsSource = FolderList;
        }

        private void LabelShow()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
               {
                   DoubleAnimation daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                   InitLabel.BeginAnimation(OpacityProperty, daV);
               }));
            });
        }
        private void LabelGo()
        {
            Task.Run(() =>
            {
                Thread.Sleep(500);
                LabelShow();
                for (int i = 0; i <= 606; i += 4)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {
                       InitLabel.Width = i;
                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    InitLabel.Width = 606;
                }));
                WindowShow();
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV);
                }));
                Thread.Sleep(1000);
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    InitLabel.Margin = new Thickness(0, 90, 0, 0);
                    InitLabel.Width = Form.Width;
                    InitLabel.Background = Brushes.Black;
                    DoubleAnimation daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }

        private void WindowShow()
        {
            Task.Run(() =>
            {
                for (int i = 150; i <= 490; i += 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        Form.Height = i;
                    }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    Form.Height = 500;
                }));
            });
        }
        private void InitTask()
        {
            if (!File.Exists("ramecl.exe"))
            {
                MessageBox.Show("未找到扫描引擎! 程序初始化失败", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                Environment.Exit(0);
            }
            LabelGo();
            InitFolderTree();
        }
        public List<string> GetDeviceId()
        {
            List<string> deviceIDs = new List<string>();
            ManagementObjectSearcher query = new ManagementObjectSearcher("SELECT  *  From  Win32_LogicalDisk ");
            ManagementObjectCollection queryCollection = query.Get();
            foreach (var o in queryCollection)
            {
                var mo = (ManagementObject)o;

                switch (int.Parse(mo["DriveType"].ToString()))
                {
                    case (int)DriveType.Removable:   //可以移动磁盘     
                        {
                            //MessageBox.Show("可以移动磁盘");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.Fixed:   //本地磁盘     
                        {
                            //MessageBox.Show("本地磁盘");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.CDRom:   //CD   rom   drives     
                        {
                            //MessageBox.Show("CD   rom   drives ");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.Network:   //网络驱动   
                        {
                            //MessageBox.Show("网络驱动器 ");
                            break;
                        }
                    case (int)DriveType.Ram:
                        {
                            //MessageBox.Show("驱动器是一个 RAM 磁盘 ");
                            deviceIDs.Add(mo["DeviceID"].ToString());
                            break;
                        }
                    case (int)DriveType.NoRootDirectory:
                        {
                            //MessageBox.Show("驱动器没有根目录 ");
                            break;
                        }
                }
            }
            return deviceIDs;
        }
        private bool _flag;
        private void WindowClosing()
        {
            Task.Run(() =>
            {
                for (int i = 500; i >= 10; i -= 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {
                       Form.Height = i;
                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)Close);
            });
        }
        private void WindowHiding()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    Form.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }
        private void MainWindow_OnClosing(object sender, CancelEventArgs e)
        {
            WindowClosing();
            WindowHiding();
            if (!_flag)
            {
                e.Cancel = true;
            }
            _flag = true;
        }

        private void ScanRunning()
        {
            Task.Run(() =>
            {
                int count = 0;
                while (!_isfinished)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        SpeedLabel.Content = (_lastcount - count == 0 ? (int)(_lastcount / (DateTime.Now - _startDateTime).TotalSeconds) : _lastcount - count) + " 个/s";
                        count = _lastcount;
                        TimeLabel.Content = (DateTime.Now - _startDateTime).ToString(@"hh\:mm\:ss");
                    }));
                    Thread.Sleep(1000);
                }

            });
        }
        private int _lastcount;
        private bool _isfinished;
        private int _threat;
        private DateTime _startDateTime;
        private void UpdateVirInfoListView(VirInfo content)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                if (content.FinishFlag)
                {
                    ButtonStart.Content = "开始";
                    TbCurrentTarget.Text = "查杀完毕";
                    SpeedLabel.Content = (int)(_lastcount / (DateTime.Now - _startDateTime).TotalSeconds) + " 个/s";
                    _isfinished = true;
                }
                else
                {
                    if (_lastcount++ == 0)
                    {
                        _startDateTime = DateTime.Now;
                        ScanRunning();
                    }
                    FileCountLabel.Content = _lastcount.ToString();
                    if (String.IsNullOrEmpty(content.VirName) || String.IsNullOrEmpty(content.DetectEngine))
                    {
                        TbCurrentTarget.Text = content.FileName;
                    }
                    else
                    {
                        VirInfoList.Add(new VirInfo(content.FileName, content.VirName, content.DetectEngine, content.FinishFlag, content.IsSelected, "尚未处理"));
                        ThreatLabel.Content = ++_threat;
                        TbCurrentTarget.Text = content.FileName;

                    }
                }
            }));
        }
        private ObservableDataSource<Point> _dataSourceCpu = new ObservableDataSource<Point>();
        private ObservableDataSource<Point> _dataSourceMem = new ObservableDataSource<Point>();
        private int _currentSecond = 0;
        private void UpdateResUsageInfoView(ResUsageInfo content)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                if (content.CpuUsagePercent == -1)
                {
                    _currentSecond = 0;
                    _dataSourceCpu.Collection.Clear();
                    _dataSourceMem.Collection.Clear();
                    CpuPlotter.Viewport.FitToView();
                    MemPlotter.Viewport.FitToView();
                }
                else
                {
                    _currentSecond++;
                    double x = _currentSecond, y1 = content.CpuUsagePercent, y2 = content.RamUsage;
                    _dataSourceCpu.AppendAsync(base.Dispatcher, new Point(x, y1));
                    _dataSourceMem.AppendAsync(base.Dispatcher, new Point(x, y2));
                }
            }));
        }

        private Scan _scanInstance;
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if ((string)ButtonStart.Content == "开始")
            {
                _lastcount = 0;
                _threat = 0;
                _isfinished = false;
                _scanInstance = new Scan();
                string paras = null;
                VirInfoList.Clear();
                TbCurrentTarget.Text = "正在初始化引擎并更新病毒库, 可能需要较长时间...";
                FileCountLabel.Content = "0";
                TimeLabel.Content = "00:00:00";
                ThreatLabel.Content = "0";
                SpeedLabel.Content = "0 个/s";
                if (!(EngineCloud.IsChecked ?? false))
                {
                    paras += " -!cloud";
                }
                if (!(EngineRdmPlus.IsChecked ?? false))
                {
                    paras += " -!rdm+";
                }
                if (EngineWorkers.IsChecked ?? false)
                {
                    string workers = ((int)SliderWorkers.Value).ToString();
                    paras += " -workers=";
                    paras += workers;
                }
                if (LogOutput.IsChecked ?? false)
                {
                    paras += $" \"-log={Environment.CurrentDirectory}\\ScanLog_{DateTime.Now:yyMMddhhmmss}.log\"";
                }
                if (_scanInstance.Start(FileNameTextBox.Text, paras, UpdateVirInfoListView, UpdateResUsageInfoView))
                {
                    ButtonStart.Content = "停止";
                }
                else
                {
                    MessageBox.Show("指定查杀对象不存在", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                    TbCurrentTarget.Text = "";
                }
            }
            else
            {
                _scanInstance.StopScan();
                ButtonStart.Content = "开始";
            }
        }

        private void Scan_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ScanGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Visible;
        }

        private void Result_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ResultGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Visible;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void Config_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ConfigGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Visible;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void CheckBox_Click_All(object sender, RoutedEventArgs e)
        {
            foreach (var i in VirInfoList)
            {
                if (CheckBoxSelectAll.IsChecked ?? false)
                {
                    i.IsSelected = true;
                }
                else
                {
                    i.IsSelected = false;
                }
            }
            ListViewVirInfo.Items.Refresh();
        }
        private void PackItems_OnClick(object sender, RoutedEventArgs routedEventArgs)
        {

        }

        private void UploadItems_OnClick(object sender, RoutedEventArgs routedEventArgs)
        {

        }

        private void DeleteItems_OnClick(object sender, RoutedEventArgs routedEventArgs)
        {
            foreach (var i in VirInfoList)
            {
                if (i.IsSelected && i.DealState.IndexOf("成功", StringComparison.Ordinal) < 0)
                {
                    try
                    {
                        File.Delete(i.FileName);
                        i.IsSelected = false;
                        if (CheckBoxSelectAll.IsChecked ?? false)
                        {
                            CheckBoxSelectAll.IsChecked = false;
                        }
                        i.DealState = "删除成功";
                    }
                    catch
                    {
                        i.DealState = "删除失败";
                    }
                }
            }
            ListViewVirInfo.Items.Refresh();
        }

        private void FolderTree_OnSelected(object sender, RoutedEventArgs e)
        {
            var a = e.OriginalSource as TreeViewItem;
            // TODO: 递归获取父节点，得到路径
        }
    }
}
