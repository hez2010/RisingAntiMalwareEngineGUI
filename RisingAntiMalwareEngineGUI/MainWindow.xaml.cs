using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace RisingAntiMalwareEngineGUI
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow
    {
        private ObservableCollection<VirInfo> VirInfoList { get; set; } = new ObservableCollection<VirInfo>();

        public MainWindow()
        {
            InitializeComponent();
            Dispatcher.BeginInvoke((Action)(() =>
            {
                Form.Height = 150;
                ResultGrid.Visibility = Visibility.Hidden;
                ConfigGrid.Visibility = Visibility.Hidden;
            }));
            InitTask();
            InitFolderTree();
        }

        private void InitFolderTree()
        {
            Task.Run(() =>
            {
                //TODO: 遍历文件夹
            });
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            ListViewVirInfo.ItemsSource = VirInfoList;
        }

        private void LabelShow()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
               {
                   DoubleAnimation daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                   InitLabel.BeginAnimation(OpacityProperty, daV);
               }));
            });
        }
        private void LabelGo()
        {
            Task.Run(() =>
            {
                Thread.Sleep(500);
                LabelShow();
                for (int i = 0; i <= 606; i += 4)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {
                       InitLabel.Width = i;
                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    InitLabel.Width = 606;
                }));
                WindowShow();
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV);
                }));
                Thread.Sleep(1000);
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    InitLabel.Margin = new Thickness(0, 90, 0, 0);
                    InitLabel.Width = Form.Width;
                    InitLabel.Background = Brushes.Black;
                    DoubleAnimation daV = new DoubleAnimation(0, 1, new Duration(TimeSpan.FromSeconds(1)));
                    InitLabel.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }

        private void WindowShow()
        {
            Task.Run(() =>
            {
                for (int i = 150; i <= 490; i += 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        Form.Height = i;
                    }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    Form.Height = 500;
                }));
            });
        }
        private void InitTask()
        {
            if (!File.Exists("ramecl.exe"))
            {
                MessageBox.Show("未找到扫描引擎! 程序初始化失败", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                Environment.Exit(0);
            }
            LabelGo();
        }

        private bool _flag;
        private void WindowClosing()
        {
            Task.Run(() =>
            {
                for (int i = 500; i >= 10; i -= 10)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                   {
                       Form.Height = i;
                   }));
                    Thread.Sleep(10);
                }
                Dispatcher.BeginInvoke((Action)(Close));
            });
        }
        private void WindowHiding()
        {
            Task.Run(() =>
            {
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    DoubleAnimation daV = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(1)));
                    Form.BeginAnimation(OpacityProperty, daV);
                }));
            });
        }
        private void MainWindow_OnClosing(object sender, CancelEventArgs e)
        {
            WindowClosing();
            WindowHiding();
            if (!_flag)
            {
                e.Cancel = true;
            }
            _flag = true;
        }

        private void ScanRunning()
        {
            Task.Run((() =>
            {
                int count = 0;
                while (!_isfinished)
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {

                        SpeedLabel.Content = _lastcount - count + " 个/s";
                        count = _lastcount;
                        TimeLabel.Content = (DateTime.Now - _startDateTime).ToString(@"hh\:mm\:ss");
                    }));
                    Thread.Sleep(1000);
                }

            }));
        }
        private int _lastcount;
        private bool _isfinished;
        private int _threat;
        private DateTime _startDateTime;
        private void UpdateVirInfoListView(VirInfo content)
        {

            Dispatcher.BeginInvoke((Action)(() =>
            {
                //向listview插入信息，考虑正常文件virName和detectEngine为空的情况
                if (content.FinishFlag)
                {
                    ButtonStart.Content = "开始";
                    TbCurrentTarget.Text = "查杀完毕";
                    _isfinished = true;
                }
                else
                {
                    if (_lastcount++ == 0)
                    {
                        _startDateTime = DateTime.Now;
                        ScanRunning();
                    }
                    FileCountLabel.Content = _lastcount.ToString();
                    if (String.IsNullOrEmpty(content.VirName) || String.IsNullOrEmpty(content.DetectEngine))
                    {
                        TbCurrentTarget.Text = content.FileName;

                    }
                    else
                    {
                        VirInfoList.Add(new VirInfo(content.FileName, content.VirName, content.DetectEngine, content.FinishFlag, content.IsSelected));
                        ThreatLabel.Content = ++_threat;
                        TbCurrentTarget.Text = content.FileName;

                    }
                }
            }));
        }

        private Scan _scanInstance;
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if ((string)ButtonStart.Content == "开始")
            {
                _lastcount = 0;
                _threat = 0;
                _isfinished = false;
                _scanInstance = new Scan();
                string paras = null;
                VirInfoList.Clear();
                TbCurrentTarget.Text = "正在初始化引擎并更新病毒库, 可能需要较长时间...";
                if (!(EngineCloud.IsChecked ?? false))
                {
                    paras += " -!cloud";
                }
                if (!(EngineRdmPlus.IsChecked ?? false))
                {
                    paras += " -!rdm+";
                }
                if (EngineWorkers.IsChecked ?? false)
                {
                    string workers = ((int)SliderWorkers.Value).ToString();
                    paras += " -workers=";
                    paras += workers;
                }
                if (LogOutput.IsChecked ?? false)
                {
                    paras += $" \"-log={Environment.CurrentDirectory}\\ScanLog_{DateTime.Now:yyMMddhhmmss}.log\"";
                }
                if (_scanInstance.Start(FileNameTextBox.Text, paras, UpdateVirInfoListView))
                {
                    ButtonStart.Content = "停止";
                }
                else
                {
                    MessageBox.Show("指定查杀对象不存在", "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                    TbCurrentTarget.Text = "";
                }
            }
            else
            {
                _scanInstance.StopScan();
                ButtonStart.Content = "开始";
            }
        }

        private void Scan_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ScanGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Visible;
        }

        private void Result_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ResultGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Visible;
            ConfigGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void Config_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            ConfigGrid.Margin = new Thickness(129, 122, 0, 0);
            ResultGrid.Visibility = Visibility.Hidden;
            ConfigGrid.Visibility = Visibility.Visible;
            ScanGrid.Visibility = Visibility.Hidden;
        }

        private void CheckBox_Click_All(object sender, RoutedEventArgs e)
        {
            foreach (var i in VirInfoList)
            {
                if (CheckBoxSelectAll.IsChecked ?? false)
                {
                    i.IsSelected = true;
                }
                else
                {
                    i.IsSelected = false;
                }
            }
        }
    }
}
