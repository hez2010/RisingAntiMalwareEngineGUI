using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace RisingAntiMalwareEngineGUI
{
    class Scan
    {
        private JObject _objJsonResult;
        private string _last;
        private bool _flag;
        private void ParseJsonResult(string strResultJson, ref VirInfo obj)
        {
            string temp = _last + strResultJson;
            if (temp.IndexOf("{", StringComparison.Ordinal) >= 0)
            {
                _flag = true;
                obj.FinishFlag = false;
                obj.IsSelected = false;
                try
                {
                    _objJsonResult = JObject.Parse(temp);
                    obj.FileName = _objJsonResult["filename"].ToString();
                    obj.VirName = _objJsonResult["infect"]["threat"].ToString();
                    obj.DetectEngine = _objJsonResult["infect"]["engine"].ToString();
                }
                catch
                {
                    try
                    {
                        obj.FileName = _objJsonResult["filename"].ToString();
                        obj.VirName = obj.DetectEngine = "";
                    }
                    catch
                    {
                        obj.FileName = "";
                        _last = temp;
                    }
                }
            }
            else if (_flag)
            {
                obj.FinishFlag = true;
                obj.FileName = "查杀完毕";
            }
        }
        private Process _scanProcess;
        public bool Start(string fileName, string _params, Action<VirInfo> reCallAction)
        {
            if (!Directory.Exists(fileName) && !File.Exists(fileName))
            {
                return false;
            }
            _flag = false;
            _last = "";
            Scaning(fileName, _params, reCallAction);
            return true;
        }

        public void StopScan()
        {
            try
            {
                _scanProcess.Kill();
                _scanProcess.Dispose();
            }
            catch
            {
                // ignored
            }
        }
        private void Scaning(string fileName, string _params, Action<VirInfo> reCallAction)
        {
            Task.Run(() =>
            {
                _scanProcess = new Process
                {
                    StartInfo =
                    {
                        Arguments = "\"" + fileName + "\"" + " -output-json" + _params,
                        FileName = "ramecl.exe",
                        RedirectStandardOutput = true,
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden,
                        UseShellExecute = false
                    }
                };
                _scanProcess.Start();
                _scanProcess.BeginOutputReadLine();
                _scanProcess.OutputDataReceived += (o, args) =>
                {
                    if (!String.IsNullOrEmpty(args.Data))
                    {
                        VirInfo objvirInfo = new VirInfo();
                        ParseJsonResult(args.Data, ref objvirInfo);
                        if(!String.IsNullOrEmpty(objvirInfo.FileName))
                        {
                            reCallAction(objvirInfo);
                        }
                    }
                };
            });
        }
    }
}
